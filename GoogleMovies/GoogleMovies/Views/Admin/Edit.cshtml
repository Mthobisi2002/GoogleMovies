@model EditMovieViewModel

<h2>Edit Movie</h2>

@if (TempData["Errors"] != null)
{
    var errors = TempData["Errors"] as List<string>;
    if (errors != null && errors.Any())
    {
        <div class="alert alert-danger">
            <ul>
                @foreach (var error in errors)
                {
                    <li>@error</li>
                }
            </ul>
        </div>
    }
}

<form asp-controller="Admin" asp-action="Edit" method="post">
    <!-- Movie Title -->
    <div>
        <label for="Title">Title</label>
        <input type="text" id="Title" name="Title" value="@Model.Title" required />
    </div>

    <!-- Genre Dropdown -->
    <div>
        <label for="GenreIds">Genres</label>
        <select id="GenreIds" name="GenreIds" multiple required>
            @foreach (var genre in Model.GenreList)
            {
                <option value="@genre.Value">@genre.Text</option>
            }
        </select>
    </div>

    <!-- Description -->
    <div>
        <label for="Description">Description</label>
        <textarea id="Description" name="Description">@Model.Description</textarea>
    </div>

    <!-- Year -->
    <div>
        <label for="Year">Year</label>
        <input type="number" id="Year" name="Year" value="@Model.Year" required />
    </div>

    <!-- Duration -->
    <div>
        <label for="DurationMinutes">Duration (Minutes)</label>
        <input type="number" id="DurationMinutes" name="DurationMinutes" value="@Model.DurationMinutes" required />
    </div>

    <!-- Age Rating -->
    <div>
        <label for="AgeRating">Age Rating</label>
        <input type="text" id="AgeRating" name="AgeRating" value="@Model.AgeRating" required />
    </div>

    <!-- Rotten Tomatoes Rating -->
    <div>
        <label for="RottenTomatoesRating">Rotten Tomatoes Rating</label>
        <input type="number" step="0.01" id="RottenTomatoesRating" name="RottenTomatoesRating" value="@Model.RottenTomatoesRating" required />
    </div>

    <!-- Price for Rent -->
    <div>
        <label for="PriceRent">Price (Rent)</label>
        <input type="number" step="0.01" id="PriceRent" name="PriceRent" value="@Model.PriceRent" required />
    </div>

    <!-- Price for Buy -->
    <div>
        <label for="PriceBuy">Price (Buy)</label>
        <input type="number" step="0.01" id="PriceBuy" name="PriceBuy" value="@Model.PriceBuy" required />
    </div>

    <!-- Trailer URL -->
    <div>
        <label for="TrailerUrl">Trailer URL</label>
        <input type="url" id="TrailerUrl" name="TrailerUrl" value="@Model.TrailerUrl" />
    </div>

    <!-- Movie Image URL -->
    <div>
        <label for="ImageUrl">Movie Image URL</label>
        <input type="url" id="ImageUrl" name="ImageUrl" value="@Model.ImageUrl" />
    </div>

    <!-- Cast Members (Max: 3) -->
    <div>
        <label>Cast Members (Max: 3)</label>
        <div id="cast-container">
            @for (int i = 0; i < (Model.CastNames?.Count ?? 0); i++)
            {
                <div class="cast-entry">
                    <input type="text" name="CastNames[@i]" class="cast-input" placeholder="Enter cast name" value="@Model.CastNames[i]" required />
                    <input type="text" name="CastImages[@i]" class="cast-image-input" placeholder="Enter cast image URL" value="@Model.CastImages[i]" />
                    <button type="button" class="remove-cast-btn">Remove</button>
                </div>
            }
        </div>
        <button type="button" id="add-cast-btn">Add Another Cast</button>
    </div>

    <!-- Save Button -->
    <button type="submit">Save Movie</button>
</form>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const castContainer = document.getElementById("cast-container");
        const addCastBtn = document.getElementById("add-cast-btn");

        // Function to create a new cast input group
        function createCastInput(index) {
            const div = document.createElement("div");
            div.classList.add("cast-entry");

            div.innerHTML = `
                        <input type="text" name="CastNames[${index}]" class="cast-input" placeholder="Enter cast name" required />
                        <input type="text" name="CastImages[${index}]" class="cast-image-input" placeholder="Enter cast image URL" />
                        <button type="button" class="remove-cast-btn">Remove</button>
                    `;

            return div;
        }

        // Add a new cast input when the button is clicked
        addCastBtn.addEventListener("click", () => {
            const currentCastCount = castContainer.querySelectorAll(".cast-entry").length;
            if (currentCastCount < 3) {
                const newCastInput = createCastInput(currentCastCount);
                castContainer.appendChild(newCastInput);
            } else {
                alert("You can only add up to 3 cast members.");
            }
        });

        // Remove a cast input when the "Remove" button is clicked
        castContainer.addEventListener("click", (event) => {
            if (event.target.classList.contains("remove-cast-btn")) {
                const entryToRemove = event.target.closest(".cast-entry");
                entryToRemove.remove();

                // Re-index remaining cast inputs
                const remainingInputs = castContainer.querySelectorAll(".cast-entry");
                remainingInputs.forEach((entry, index) => {
                    const castNameInput = entry.querySelector(".cast-input");
                    const castImageInput = entry.querySelector(".cast-image-input");

                    castNameInput.name = `CastNames[${index}]`;
                    castImageInput.name = `CastImages[${index}]`;
                });
            }
        });
    });
</script>
