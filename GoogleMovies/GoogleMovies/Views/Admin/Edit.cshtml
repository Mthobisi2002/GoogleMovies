@using Newtonsoft.Json;
@model GoogleMovies.Models.EditMovieViewModel

<h2>Edit Movie</h2>

@if (TempData["ValidationErrors"] != null)
{
    var validationErrors = JsonConvert.DeserializeObject<List<string>>(TempData["ValidationErrors"].ToString());
    if (validationErrors != null && validationErrors.Any())
    {
        <div class="alert alert-danger">
            <ul>
                @foreach (var error in validationErrors)
                {
                    <li>@error</li>
                }
            </ul>
        </div>
    }
}

@if (TempData["ExceptionErrors"] != null)
{
    var exceptionErrors = JsonConvert.DeserializeObject<List<string>>(TempData["ExceptionErrors"].ToString());
    if (exceptionErrors != null && exceptionErrors.Any())
    {
        <div class="alert alert-warning">
            @foreach (var error in exceptionErrors)
            {
                <p>@error</p>
            }
        </div>
    }
}

<form asp-action="Edit" method="post">
    <input type="hidden" asp-for="Id" />

    <div>
        <label asp-for="Title">Title</label>
        <input asp-for="Title" />
    </div>

    <div>
        <label>Genres</label>
        <select asp-for="GenreIds" asp-items="Model.Genres" multiple required></select>

    </div>
    <div>
        <label asp-for="Description">Description</label>
        <textarea asp-for="Description"></textarea>
    </div>
    <div>
        <label asp-for="Year">Year</label>
        <input asp-for="Year" />
    </div>
    <div>
        <label asp-for="DurationMinutes">Duration (Minutes)</label>
        <input asp-for="DurationMinutes" />
    </div>
    <div>
        <label asp-for="AgeRating">Age Rating</label>
        <input asp-for="AgeRating" />
    </div>
    <div>
        <label asp-for="RottenTomatoesRating">Rotten Tomatoes Rating</label>
        <input asp-for="RottenTomatoesRating" />
    </div>
    <div>
        <label asp-for="PriceRent">Price (Rent)</label>
        <input asp-for="PriceRent" />
    </div>
    <div>
        <label asp-for="PriceBuy">Price (Buy)</label>
        <input asp-for="PriceBuy" />
    </div>
    <div>
        <label asp-for="TrailerUrl">Trailer URL</label>
        <input asp-for="TrailerUrl" />
    </div>
    <div>
        <label asp-for="ImageUrl">Image URL</label>
        <input asp-for="ImageUrl" />
    </div>

    <div>
        <label>Cast Members</label>
        <div id="cast-container">
            @for (int i = 0; i < Model.CastNames.Count; i++)
            {
                <div class="cast-entry" data-index="@i">
                    <label>Cast Name</label>
                    <input type="text" name="CastNames[@i]" value="@Model.CastNames[i]" required />

                    <label>Cast Image URL</label>
                    <input type="text" name="CastImages[@i]" value="@Model.CastImages[i]" />

                    <button type="button" class="remove-cast">Remove</button>
                </div>
            }
        </div>

        <button type="button" id="add-cast">Add Cast</button>
    </div>


    <button type="submit">Save Changes</button>
</form>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const castContainer = document.getElementById("cast-container");
        const addCastButton = document.getElementById("add-cast");

        // Function to add a new cast entry
        function addCastEntry() {
            const currentIndex = castContainer.children.length; // Get the next index
            const castEntry = document.createElement("div");
            castEntry.classList.add("cast-entry");
            castEntry.setAttribute("data-index", currentIndex);

            castEntry.innerHTML = `
                    <label>Cast Name</label>
                    <input type="text" name="CastNames[${currentIndex}]" required />

                    <label>Cast Image URL</label>
                    <input type="text" name="CastImages[${currentIndex}]" />

                    <button type="button" class="remove-cast">Remove</button>
                `;

            castContainer.appendChild(castEntry);

            // Attach the remove event to the new button
            castEntry.querySelector(".remove-cast").addEventListener("click", () => {
                castEntry.remove();
                updateIndices();
            });
        }

        // Function to update input field indices after a removal
        function updateIndices() {
            const entries = castContainer.querySelectorAll(".cast-entry");
            entries.forEach((entry, index) => {
                entry.setAttribute("data-index", index);
                entry.querySelector("input[name^='CastNames']").setAttribute("name", `CastNames[${index}]`);
                entry.querySelector("input[name^='CastImages']").setAttribute("name", `CastImages[${index}]`);
            });
        }

        // Add new cast entry
        addCastButton.addEventListener("click", addCastEntry);

        // Attach remove event to existing buttons
        castContainer.querySelectorAll(".remove-cast").forEach(button => {
            button.addEventListener("click", function () {
                this.closest(".cast-entry").remove();
                updateIndices();
            });
        });
    });
</script>


